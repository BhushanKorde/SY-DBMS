-- ==================================================
-- 1. CREATE INDEXES
-- ==================================================
-- Index on customer email for fast lookups
CREATE INDEX idx_email ON Customers(email);

-- Composite index on OrderDetails for join performance
CREATE INDEX idx_order_product ON OrderDetails(order_id, product_id);



-- ==================================================
-- 2. NESTED SUBQUERY
-- ==================================================
-- Find customers who ordered the most expensive product
SELECT name
FROM Customers
WHERE customer_id IN (
    SELECT o.customer_id
    FROM Orders o
    WHERE o.order_id IN (
        SELECT od.order_id
        FROM OrderDetails od
        WHERE od.product_id = (
            SELECT product_id FROM Products ORDER BY price DESC LIMIT 1
        )
    )
);



-- ==================================================
-- 3. ALL TYPES OF JOINS
-- ==================================================

-- INNER JOIN: Get order info with customer and product
SELECT c.name, p.product_name, od.quantity
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN OrderDetails od ON o.order_id = od.order_id
INNER JOIN Products p ON od.product_id = p.product_id;

-- LEFT JOIN: Show customers even if they have no orders
SELECT c.name, o.order_id
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- RIGHT JOIN: Show orders even if customer is missing (simulated orphan)
SELECT o.order_id, c.name
FROM Orders o
RIGHT JOIN Customers c ON o.customer_id = c.customer_id;

-- FULL OUTER JOIN simulation (UNION of LEFT and RIGHT)
SELECT c.name, o.order_id
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
UNION
SELECT c.name, o.order_id
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;



-- ==================================================
-- 4. SET MEMBERSHIP TESTING (IN / NOT IN)
-- ==================================================

-- Customers who placed an order
SELECT name FROM Customers
WHERE customer_id IN (
    SELECT customer_id FROM Orders
);

-- Customers who have NOT placed any orders
SELECT name FROM Customers
WHERE customer_id NOT IN (
    SELECT customer_id FROM Orders
);



-- ==================================================
-- 5. SET COMPARISON (ANY / ALL / EXISTS)
-- ==================================================

-- Products more expensive than ANY product ordered by customer 'Bob'
SELECT * FROM Products
WHERE price > ANY (
    SELECT p.price
    FROM Products p
    JOIN OrderDetails od ON p.product_id = od.product_id
    JOIN Orders o ON o.order_id = od.order_id
    JOIN Customers c ON c.customer_id = o.customer_id
    WHERE c.name = 'Bob'
);

-- Products more expensive than ALL products bought by customer 'Alice'
SELECT * FROM Products
WHERE price > ALL (
    SELECT p.price
    FROM Products p
    JOIN OrderDetails od ON p.product_id = od.product_id
    JOIN Orders o ON o.order_id = od.order_id
    JOIN Customers c ON c.customer_id = o.customer_id
    WHERE c.name = 'Alice'
);

-- EXISTS: Check if customer 'Charlie' has placed any order
SELECT name FROM Customers c
WHERE name = 'Charlie'
AND EXISTS (
    SELECT * FROM Orders o WHERE o.customer_id = c.customer_id
);

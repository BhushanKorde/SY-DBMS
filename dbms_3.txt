-- =================================================
-- 1. CREATE DATABASE AND TABLES
-- =================================================
CREATE DATABASE ecommerce_db;
USE ecommerce_db;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(100),
    price DECIMAL(10,2)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE OrderDetails (
    order_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);



-- =================================================
-- 2. INSERT DATA (DML)
-- =================================================
INSERT INTO Customers (name, email) VALUES
('Alice', 'alice@gmail.com'),
('Bob', 'bob@gmail.com'),
('Charlie', 'charlie@gmail.com');

INSERT INTO Products (product_name, price) VALUES
('Laptop', 80000),
('Smartphone', 40000),
('Keyboard', 1200),
('Mouse', 700);

INSERT INTO Orders (customer_id, order_date) VALUES
(1, '2025-05-10'),
(2, '2025-05-11');

INSERT INTO OrderDetails (order_id, product_id, quantity) VALUES
(1, 1, 1),  -- Alice bought 1 Laptop
(1, 3, 2),  -- Alice bought 2 Keyboards
(2, 2, 1);  -- Bob bought 1 Smartphone



-- =================================================
-- 3. SELECT WITH FUNCTIONS & OPERATORS
-- =================================================

-- Query 1: Get total amount spent per customer (price * quantity)
SELECT c.name, SUM(p.price * od.quantity) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN OrderDetails od ON o.order_id = od.order_id
JOIN Products p ON od.product_id = p.product_id
GROUP BY c.name;

-- Query 2: List all products where price > 1000 AND product name contains 'o'
SELECT * FROM Products
WHERE price > 1000 AND product_name LIKE '%o%';

-- Query 3: Increase all product prices by 10%
UPDATE Products SET price = price * 1.10;

-- Query 4: Delete orders before a specific date
DELETE FROM Orders WHERE order_date < '2025-05-01';



-- =================================================
-- 4. JOINS
-- =================================================

-- Query 5: INNER JOIN - Show order details with customer and product info
SELECT o.order_id, c.name, p.product_name, od.quantity
FROM Orders o
INNER JOIN Customers c ON o.customer_id = c.customer_id
INNER JOIN OrderDetails od ON o.order_id = od.order_id
INNER JOIN Products p ON od.product_id = p.product_id;

-- Query 6: LEFT JOIN - Show all customers even if they have no orders
SELECT c.name, o.order_id
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- Query 7: RIGHT JOIN - Show all orders even if the customer is missing
SELECT o.order_id, c.name
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;

-- Note: FULL OUTER JOIN is not directly supported in MySQL, simulate with UNION
-- Query 8: FULL JOIN (simulate with UNION)
SELECT c.name, o.order_id
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
UNION
SELECT c.name, o.order_id
FROM Customers c
RIGHT JOIN Orders o ON c.customer_id = o.customer_id;



-- =================================================
-- 5. SET OPERATORS
-- =================================================

-- Query 9: Use UNION to list product names and customer names
SELECT name FROM Customers
UNION
SELECT product_name FROM Products;



-- =================================================
-- 6. SUBQUERY & VIEW
-- =================================================

-- Query 10: Subquery - Get customers who spent more than 50000
SELECT name FROM Customers
WHERE customer_id IN (
    SELECT o.customer_id
    FROM Orders o
    JOIN OrderDetails od ON o.order_id = od.order_id
    JOIN Products p ON od.product_id = p.product_id
    GROUP BY o.customer_id
    HAVING SUM(p.price * od.quantity) > 50000
);

-- Query 11: Create a view for order summary
CREATE VIEW OrderSummary AS
SELECT o.order_id, c.name AS customer_name, p.product_name, od.quantity, (p.price * od.quantity) AS total_price
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
JOIN OrderDetails od ON o.order_id = od.order_id
JOIN Products p ON od.product_id = p.product_id;

-- Query 12: Select from the view
SELECT * FROM OrderSummary;
